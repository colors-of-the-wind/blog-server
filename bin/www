#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const https = require('https');
const fs = require('fs');
const debug = require('debug')('log-collection-server:server');

const app = require('../app');
const logger = require('../utility/logger');
const ssl = require('../config/server.json').ssl;

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
let server = null;

app.set('port', port);


if (ssl.enable) {
  /**
   * Create HTTP server.
   */
  try {
      const privateKey  = fs.readFileSync(ssl.key, 'utf8');
      const certificate = fs.readFileSync(ssl.cert, 'utf8');

      server = https.createServer({
          key: privateKey,
          cert: certificate
      }, app);
  } catch (err) {
      logger.error('未能成功读取SSL私钥或证书文件！Error:', err);
      process.exit(1);
  }
} else {
  /**
   * Create HTTP server.
   */
  const server = http.createServer(app);
}



/**
 * Listen on provided port, on all network interfaces.
 */



server.listen(port, () => {
    logger.info('blog listening on port', port);
});
server.on('error', onError);
server.on('listening', onListening);
